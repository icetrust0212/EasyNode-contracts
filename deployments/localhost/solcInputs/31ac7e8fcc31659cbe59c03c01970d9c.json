{
  "language": "Solidity",
  "sources": {
    "contracts/EasyToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/utils/Address.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"./NodeRewardController.sol\";\r\nimport \"./interfaces/IJoeRouter02.sol\";\r\nimport \"./interfaces/IJoeFactory.sol\";\r\n\r\n/**\r\n * @title SafeMathUint\r\n * @dev Math operations with safety TKNcks that revert on error\r\n */\r\nlibrary SafeMathUint {\r\n    function toInt256Safe(uint256 a) internal pure returns (int256) {\r\n        int256 b = int256(a);\r\n        require(b >= 0, \"toInt256Safe: B LESS THAN ZERO\");\r\n        return b;\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeMathInt\r\n * @dev Math operations for int256 with overflow safety TKNcks.\r\n */\r\nlibrary SafeMathInt {\r\n    int256 private constant MIN_INT256 = int256(1) << 255;\r\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\r\n\r\n    /**\r\n     * @dev Multiplies two int256 variables and fails on overflow.\r\n     */\r\n    function mul(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a * b;\r\n\r\n        // Detect overflow when multiplying MIN_INT256 with -1\r\n        require(\r\n            c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256),\r\n            \"mul: A B C combi values invalid with MIN_INT256\"\r\n        );\r\n        require((b == 0) || (c / b == a), \"mul: A B C combi values invalid\");\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Division of two int256 variables and fails on overflow.\r\n     */\r\n    function div(int256 a, int256 b) internal pure returns (int256) {\r\n        // Prevent overflow when dividing MIN_INT256 by -1\r\n        require(b != -1 || a != MIN_INT256, \"div: b == 1 OR A == MIN_INT256\");\r\n\r\n        // Solidity already throws when dividing by 0.\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Subtracts two int256 variables and fails on overflow.\r\n     */\r\n    function sub(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a - b;\r\n        require(\r\n            (b >= 0 && c <= a) || (b < 0 && c > a),\r\n            \"sub: A B C combi values invalid\"\r\n        );\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Adds two int256 variables and fails on overflow.\r\n     */\r\n    function add(int256 a, int256 b) internal pure returns (int256) {\r\n        int256 c = a + b;\r\n        require(\r\n            (b >= 0 && c >= a) || (b < 0 && c < a),\r\n            \"add: A B C combi values invalid\"\r\n        );\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts to absolute value, and fails on overflow.\r\n     */\r\n    function abs(int256 a) internal pure returns (int256) {\r\n        require(a != MIN_INT256, \"abs: A EQUAL MIN INT256\");\r\n        return a < 0 ? -a : a;\r\n    }\r\n\r\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\r\n        require(a >= 0, \"toUint256Safe: A LESS THAN ZERO\");\r\n        return uint256(a);\r\n    }\r\n}\r\n\r\ncontract EasyToken is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    NodeRewardController private nodeRewardManager;\r\n\r\n    IJoeRouter02 public uniswapV2Router;\r\n\r\n    address public uniswapV2Pair;\r\n    address public expensePool;\r\n    address public distributionPool;\r\n\r\n    address public marketingPool;\r\n    address public treasuryPool;\r\n    address public cashoutPool;\r\n\r\n    address public deadWallet = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    uint256 public rewardsFee;\r\n    uint256 public liquidityPoolFee;\r\n    uint256 public expenseFee;\r\n    uint256 public totalFees;\r\n\r\n    uint256 public sellFee;\r\n\r\n    uint256 public marketingFee;\r\n\r\n    uint256 private rwSwap;\r\n    bool private swapping = false;\r\n    bool private swapLiquify = true;\r\n    uint256 public swapTokensAmount = 300 * 10 ** 18; // 300 $EASY\r\n\r\n    uint256 TOTAL_SUPPLY = 10 ** 12 * (10 ** 18); // 1T $EASY\r\n\r\n    mapping(address => bool) public _isBlacklisted;\r\n    mapping(address => bool) public automatedMarketMakerPairs;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n\r\n    event LiquidityWalletUpdated(\r\n        address indexed newLiquidityWallet,\r\n        address indexed oldLiquidityWallet\r\n    );\r\n\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n\r\n    constructor(\r\n        address[] memory addresses,\r\n        address joeRouterV2Address,\r\n        address nodeControllerAddress\r\n    ) ERC20(\"EasyToken\", \"EASY\") {\r\n\r\n        require(addresses.length == 5, \"Count of Addresses must be 5\");\r\n\r\n        nodeRewardManager = NodeRewardController(nodeControllerAddress);\r\n\r\n        treasuryPool = addresses[0];\r\n        distributionPool = addresses[1];\r\n        marketingPool = addresses[2];\r\n        expensePool = addresses[3];\r\n        cashoutPool = addresses[4];\r\n\r\n        for (uint256 i = 0; i < 5; i++) {\r\n            _isExcludedFromFee[addresses[i]] = true;\r\n        }\r\n\r\n        require(expensePool != address(0) && distributionPool != address(0), \"FUTUR & REWARD ADDRESS CANNOT BE ZERO\");\r\n        \r\n        rewardsFee = 60;\r\n        liquidityPoolFee = 30;\r\n        marketingFee = 5;\r\n        expenseFee = 5;\r\n        rwSwap = 30;\r\n\r\n        totalFees = rewardsFee.add(liquidityPoolFee).add(expenseFee).add(marketingFee);\r\n\r\n        _mint(treasuryPool, TOTAL_SUPPLY * 60 / 100); // 60% -> treasury wallet\r\n        _mint(distributionPool, TOTAL_SUPPLY * 20 / 100); // 20 % -> distribution wallet\r\n        _mint(marketingPool, TOTAL_SUPPLY * 20 / 100); // 20% -> marketing wallet \r\n\r\n        uniswapV2Router = IJoeRouter02(joeRouterV2Address);\r\n\r\n        uniswapV2Pair = IJoeFactory(uniswapV2Router.factory())\r\n        .createPair(address(this), uniswapV2Router.WAVAX());\r\n        \r\n    }\r\n\r\n    function setNodeManagement(address nodeManagement) external onlyOwner {\r\n        nodeRewardManager = NodeRewardController(nodeManagement);\r\n    }\r\n\r\n    function updateSwapTokensAmount(uint256 newVal) external onlyOwner {\r\n        swapTokensAmount = newVal;\r\n    }\r\n\r\n    function updateExpenseWall(address payable wall) external onlyOwner {\r\n        expensePool = wall;\r\n    }\r\n\r\n    function updateRewardsWall(address payable wall) external onlyOwner {\r\n        distributionPool = wall;\r\n    }\r\n\r\n    function updateMarketingWall(address payable wall) external onlyOwner {\r\n        marketingPool = wall;\r\n    }\r\n\r\n    function updateCashoutWall(address payable wall) external onlyOwner {\r\n        cashoutPool = wall;\r\n    }\r\n\r\n    function updateRewardsFee(uint256 value) external onlyOwner {\r\n        rewardsFee = value;\r\n        totalFees = rewardsFee.add(liquidityPoolFee).add(expenseFee).add(marketingFee);\r\n    }\r\n\r\n    function updateLiquiditFee(uint256 value) external onlyOwner {\r\n        liquidityPoolFee = value;\r\n        totalFees = rewardsFee.add(liquidityPoolFee).add(expenseFee).add(marketingFee);\r\n    }\r\n\r\n    function updateFuturFee(uint256 value) external onlyOwner {\r\n        expenseFee = value;\r\n        totalFees = rewardsFee.add(liquidityPoolFee).add(expenseFee).add(marketingFee);\r\n    }\r\n\r\n    function updateMarketingFee(uint256 value) external onlyOwner {\r\n        marketingFee = value;\r\n        totalFees = rewardsFee.add(liquidityPoolFee).add(expenseFee).add(marketingFee);\r\n    }\r\n\r\n    function updateSellFee(uint256 value) external onlyOwner {\r\n        sellFee = value;\r\n    }\r\n\r\n    function updateRwSwapFee(uint256 value) external onlyOwner {\r\n        rwSwap = value;\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(address pair, bool value)\r\n    external\r\n    onlyOwner\r\n    {\r\n        require(\r\n            pair != uniswapV2Pair,\r\n            \"TKN: The PancakeSwap pair cannot be removed from automatedMarketMakerPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function blacklistMalicious(address account, bool value)\r\n    external\r\n    onlyOwner\r\n    {\r\n        _isBlacklisted[account] = value;\r\n    }\r\n\r\n    function setExcludedFromFee(address account, bool value) external onlyOwner\r\n    {\r\n        _isExcludedFromFee[account] = value;\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\r\n        require(\r\n            automatedMarketMakerPairs[pair] != value,\r\n            \"TKN: Automated market maker pair is already set to that value\"\r\n        );\r\n        automatedMarketMakerPairs[pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(pair, value);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        \r\n        _approve(sender, _msgSender(), allowance(sender, _msgSender()).sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(!_isBlacklisted[from] && !_isBlacklisted[to], \"Blacklisted address\");\r\n\r\n        uint256 feeAmount = 0;\r\n        uint256 _amount;\r\n\r\n        if (!_isExcludedFromFee[from] && (to == address(uniswapV2Router) || to == address(uniswapV2Pair))) {\r\n            require(nodeRewardManager._isNodeOwner(from), \"Create at least one Brain!\");\r\n\r\n            feeAmount = amount.mul(sellFee).div(100);\r\n        }\r\n\r\n        _amount = amount.sub(feeAmount);\r\n\r\n        super._transfer(from, cashoutPool, feeAmount);\r\n        super._transfer(from, to, _amount);\r\n    }\r\n\r\n    function swapAndSendToFee(address destination, uint256 tokens) private {\r\n        uint256 initialETHBalance = address(this).balance;\r\n        swapTokensForEth(tokens);\r\n        uint256 newBalance = (address(this).balance).sub(initialETHBalance);\r\n        payable(destination).transfer(newBalance);\r\n    }\r\n\r\n    function swapAndLiquify(uint256 tokens) private {\r\n        uint256 half = tokens.div(2);\r\n        uint256 otherHalf = tokens.sub(half);\r\n\r\n        uint256 initialBalance = address(this).balance;\r\n\r\n        swapTokensForEth(half);\r\n\r\n        uint256 newBalance = address(this).balance.sub(initialBalance);\r\n\r\n        addLiquidity(otherHalf, newBalance);\r\n\r\n        emit SwapAndLiquify(half, newBalance, otherHalf);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WAVAX();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        uniswapV2Router.swapExactTokensForAVAXSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityAVAX{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            address(0),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function createNodeWithTokens(string memory name) public {\r\n        require(\r\n            bytes(name).length > 3 && bytes(name).length < 32,\r\n            \"NODE CREATION: NAME SIZE INVALID\"\r\n        );\r\n        address sender = _msgSender();\r\n        require(\r\n            sender != address(0),\r\n            \"NODE CREATION:  creation from the zero address\"\r\n        );\r\n        require(!_isBlacklisted[sender], \"NODE CREATION: Blacklisted address\");\r\n        require(\r\n            sender != expensePool && sender != distributionPool,\r\n            \"NODE CREATION: futur and rewardsPool cannot create node\"\r\n        );\r\n        uint256 nodePrice = nodeRewardManager.nodePrice();\r\n        require(\r\n            balanceOf(sender) >= nodePrice,\r\n            \"NODE CREATION: Balance too low for creation.\"\r\n        );\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool swapAmountOk = contractTokenBalance >= swapTokensAmount;\r\n        if (\r\n            swapAmountOk &&\r\n            swapLiquify &&\r\n            !swapping &&\r\n            sender != owner() &&\r\n            !automatedMarketMakerPairs[sender]\r\n        ) {\r\n            swapping = true;\r\n\r\n            uint256 futurTokens = contractTokenBalance.mul(expenseFee).div(100);\r\n\r\n            swapAndSendToFee(expensePool, futurTokens);\r\n\r\n            uint256 rewardsPoolTokens = contractTokenBalance\r\n            .mul(rewardsFee)\r\n            .div(100);\r\n\r\n            uint256 rewardsTokenstoSwap = rewardsPoolTokens.mul(rwSwap).div(\r\n                100\r\n            );\r\n\r\n            swapAndSendToFee(distributionPool, rewardsTokenstoSwap);\r\n            super._transfer(\r\n                address(this),\r\n                distributionPool,\r\n                rewardsPoolTokens.sub(rewardsTokenstoSwap)\r\n            );\r\n\r\n            uint256 swapTokens = contractTokenBalance.mul(liquidityPoolFee).div(\r\n                100\r\n            );\r\n\r\n            swapAndLiquify(swapTokens);\r\n\r\n            uint256 marketingTokens = contractTokenBalance.mul(marketingFee).div(100);\r\n\r\n            swapAndSendToFee(marketingPool, marketingTokens);\r\n\r\n            swapTokensForEth(balanceOf(address(this)));\r\n\r\n            swapping = false;\r\n        }\r\n        super._transfer(sender, address(this), nodePrice);\r\n        nodeRewardManager.createNode(sender, name);\r\n    }\r\n\r\n    function cashoutReward(uint256 blocktime) external {\r\n        address sender = _msgSender();\r\n        require(sender != address(0), \"CSHT:  creation from the zero address\");\r\n        require(!_isBlacklisted[sender], \"MANIA CSHT: Blacklisted address\");\r\n        require(\r\n            sender != expensePool && sender != distributionPool,\r\n            \"CSHT: futur and rewardsPool cannot cashout rewards\"\r\n        );\r\n        uint256 rewardAmount = nodeRewardManager._getRewardAmountOf(\r\n            sender,\r\n            blocktime\r\n        );\r\n        require(\r\n            rewardAmount > 0,\r\n            \"CSHT: You don't have enough reward to cash out\"\r\n        );\r\n\r\n        super._transfer(distributionPool, sender, rewardAmount);\r\n        nodeRewardManager._cashoutNodeReward(sender, blocktime);\r\n    }\r\n\r\n    function cashoutAll() public {\r\n        address sender = _msgSender();\r\n        require(\r\n            sender != address(0),\r\n            \"MANIA CSHT:  creation from the zero address\"\r\n        );\r\n        require(!_isBlacklisted[sender], \"MANIA CSHT: Blacklisted address\");\r\n        require(\r\n            sender != expensePool && sender != distributionPool,\r\n            \"MANIA CSHT: future and rewardsPool cannot cashout rewards\"\r\n        );\r\n        uint256 rewardAmount = nodeRewardManager._getRewardAmountOf(sender);\r\n        require(\r\n            rewardAmount > 0,\r\n            \"MANIA CSHT: You don't have enough reward to cash out\"\r\n        );\r\n\r\n        super._transfer(distributionPool, sender, rewardAmount);\r\n        nodeRewardManager._cashoutAllNodesReward(sender);\r\n    }\r\n\r\n    function toString(uint256 value) internal pure returns (bytes memory) {\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return buffer;\r\n    }\r\n\r\n    function compound(uint256 amount) external {\r\n        require(amount > 0, \"CMPD: Amount can't be zero\");\r\n\r\n        uint256 nodePrice = nodeRewardManager.nodePrice();\r\n\r\n        require(amount % nodePrice == 0, \"CMPD: Amount must be a multiple of the node price\");\r\n\r\n        uint256 count = amount / nodePrice;\r\n        uint256 i;\r\n        string memory name;\r\n        bytes memory basic;\r\n        address sender = _msgSender();\r\n\r\n        cashoutAll();\r\n\r\n        require(balanceOf(_msgSender()) >= amount, \"CMPD: Balance is not enough\");\r\n\r\n        basic = bytes.concat(\"BRAIN-\", toString(block.timestamp), toString(nodeRewardManager._getNodeNumberOf(sender)));\r\n\r\n        for (i = 1; i <= count; i++) {\r\n          name = string(bytes.concat(basic, toString(i)));\r\n          createNodeWithTokens(name);\r\n        }\r\n    }\r\n\r\n    function renameNode(string memory oldName, string memory newName) external {\r\n      require(\r\n        nodeRewardManager._isNodeOwner(_msgSender()),\r\n        \"NO NODE OWNER\"\r\n      );\r\n\r\n      require(\r\n        bytes(newName).length > 3 && bytes(newName).length < 32,\r\n        \"NODE RENAME: NAME SIZE INVALID\"\r\n      );\r\n\r\n      nodeRewardManager._renameNode(_msgSender(), oldName, newName);\r\n    }\r\n\r\n    function boostReward(uint amount) external onlyOwner {\r\n        if (amount > address(this).balance) amount = address(this).balance;\r\n        payable(owner()).transfer(amount);\r\n    }\r\n\r\n    function changeSwapLiquify(bool newVal) external onlyOwner {\r\n        swapLiquify = newVal;\r\n    }\r\n\r\n    function getNodeNumberOf(address account) public view returns (uint256) {\r\n        return nodeRewardManager._getNodeNumberOf(account);\r\n    }\r\n\r\n    function getRewardAmountOf(address account)\r\n    public\r\n    view\r\n    onlyOwner\r\n    returns (uint256)\r\n    {\r\n        return nodeRewardManager._getRewardAmountOf(account);\r\n    }\r\n\r\n    function getRewardAmount() public view returns (uint256) {\r\n        require(_msgSender() != address(0), \"SENDER CAN'T BE ZERO\");\r\n        require(\r\n            nodeRewardManager._isNodeOwner(_msgSender()),\r\n            \"NO NODE OWNER\"\r\n        );\r\n        return nodeRewardManager._getRewardAmountOf(_msgSender());\r\n    }\r\n\r\n    function changeNodePrice(uint256 newNodePrice) external onlyOwner {\r\n        nodeRewardManager._changeNodePrice(newNodePrice);\r\n    }\r\n\r\n    function getNodePrice() public view returns (uint256) {\r\n        return nodeRewardManager.nodePrice();\r\n    }\r\n\r\n    function changeRewardPerNode(uint256 newPrice) external onlyOwner {\r\n        nodeRewardManager._changeRewardPerNode(newPrice);\r\n    }\r\n\r\n    function getRewardPerNode() public view returns (uint256) {\r\n        return nodeRewardManager.rewardPerNode();\r\n    }\r\n\r\n    function changeClaimTime(uint256 newTime) external onlyOwner {\r\n        nodeRewardManager._changeClaimTime(newTime);\r\n    }\r\n\r\n    function getClaimTime() public view returns (uint256) {\r\n        return nodeRewardManager.claimTime();\r\n    }\r\n\r\n    function changeAutoDistri(bool newMode) external onlyOwner {\r\n        nodeRewardManager._changeAutoDistri(newMode);\r\n    }\r\n\r\n    function getAutoDistri() public view returns (bool) {\r\n        return nodeRewardManager.autoDistri();\r\n    }\r\n\r\n    function changeGasDistri(uint256 newGasDistri) external onlyOwner {\r\n        nodeRewardManager._changeGasDistri(newGasDistri);\r\n    }\r\n\r\n    function getGasDistri() public view returns (uint256) {\r\n        return nodeRewardManager.gasForDistribution();\r\n    }\r\n\r\n    function getDistriCount() public view returns (uint256) {\r\n        return nodeRewardManager.lastDistributionCount();\r\n    }\r\n\r\n    function getNodesNames() public view returns (string memory) {\r\n        require(_msgSender() != address(0), \"SENDER CAN'T BE ZERO\");\r\n        require(\r\n            nodeRewardManager._isNodeOwner(_msgSender()),\r\n            \"NO NODE OWNER\"\r\n        );\r\n        return nodeRewardManager._getNodesNames(_msgSender());\r\n    }\r\n\r\n    function getNodesCreatime() public view returns (string memory) {\r\n        require(_msgSender() != address(0), \"SENDER CAN'T BE ZERO\");\r\n        require(\r\n            nodeRewardManager._isNodeOwner(_msgSender()),\r\n            \"NO NODE OWNER\"\r\n        );\r\n        return nodeRewardManager._getNodesCreationTime(_msgSender());\r\n    }\r\n\r\n    function getNodesRewards() public view returns (string memory) {\r\n        require(_msgSender() != address(0), \"SENDER CAN'T BE ZERO\");\r\n        require(\r\n            nodeRewardManager._isNodeOwner(_msgSender()),\r\n            \"NO NODE OWNER\"\r\n        );\r\n        return nodeRewardManager._getNodesRewardAvailable(_msgSender());\r\n    }\r\n\r\n    function getNodesLastClaims() public view returns (string memory) {\r\n        require(_msgSender() != address(0), \"SENDER CAN'T BE ZERO\");\r\n        require(\r\n            nodeRewardManager._isNodeOwner(_msgSender()),\r\n            \"NO NODE OWNER\"\r\n        );\r\n        return nodeRewardManager._getNodesLastClaimTime(_msgSender());\r\n    }\r\n\r\n    function transferNode(address to, string memory nodeName) external returns (bool) {\r\n        return nodeRewardManager._transferNode(msg.sender, to, nodeName);\r\n    }\r\n\r\n    function getTotalStakedReward() public view returns (uint256) {\r\n        return nodeRewardManager.totalRewardStaked();\r\n    }\r\n\r\n    function getTotalCreatedNodes() public view returns (uint256) {\r\n        return nodeRewardManager.totalNodesCreated();\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/NodeRewardController.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\n\r\nlibrary IterableMapping {\r\n    // Iterable mapping from address to uint;\r\n    struct Map {\r\n        address[] keys;\r\n        mapping(address => uint256) values;\r\n        mapping(address => uint256) indexOf;\r\n        mapping(address => bool) inserted;\r\n    }\r\n\r\n    function get(Map storage map, address key) internal view returns (uint256) {\r\n        return map.values[key];\r\n    }\r\n\r\n    function getIndexOfKey(Map storage map, address key)\r\n    internal\r\n    view\r\n    returns (int256)\r\n    {\r\n        if (!map.inserted[key]) {\r\n            return -1;\r\n        }\r\n        return int256(map.indexOf[key]);\r\n    }\r\n\r\n    function getKeyAtIndex(Map storage map, uint256 index)\r\n    internal\r\n    view\r\n    returns (address)\r\n    {\r\n        return map.keys[index];\r\n    }\r\n\r\n    function size(Map storage map) internal view returns (uint256) {\r\n        return map.keys.length;\r\n    }\r\n\r\n    function set(\r\n        Map storage map,\r\n        address key,\r\n        uint256 val\r\n    ) internal {\r\n        if (map.inserted[key]) {\r\n            map.values[key] = val;\r\n        } else {\r\n            map.inserted[key] = true;\r\n            map.values[key] = val;\r\n            map.indexOf[key] = map.keys.length;\r\n            map.keys.push(key);\r\n        }\r\n    }\r\n\r\n    function remove(Map storage map, address key) internal {\r\n        if (!map.inserted[key]) {\r\n            return;\r\n        }\r\n\r\n        delete map.inserted[key];\r\n        delete map.values[key];\r\n\r\n        uint256 index = map.indexOf[key];\r\n        uint256 lastIndex = map.keys.length - 1;\r\n        address lastKey = map.keys[lastIndex];\r\n\r\n        map.indexOf[lastKey] = index;\r\n        delete map.indexOf[key];\r\n\r\n        map.keys[index] = lastKey;\r\n        map.keys.pop();\r\n    }\r\n}\r\ncontract NodeRewardController {\r\n    using SafeMath for uint256;\r\n    using IterableMapping for IterableMapping.Map;\r\n\r\n    struct NodeEntity {\r\n        string name;\r\n        uint256 creationTime;\r\n        uint256 lastClaimTime;\r\n        uint256 rewardAvailable;\r\n    }\r\n\r\n    IterableMapping.Map private nodeOwners;\r\n    mapping(address => NodeEntity[]) private _nodesOfUser;\r\n\r\n    uint256 public nodePrice;\r\n    uint256 public rewardPerNode;\r\n    uint256 public rewardPerSecond;\r\n    uint256 public claimTime;\r\n\r\n    address public gateKeeper;\r\n    address public token;\r\n\r\n    bool public autoDistri = true;\r\n    bool public distribution = false;\r\n\r\n    uint256 public gasForDistribution = 300000;\r\n    uint256 public lastDistributionCount = 0;\r\n    uint256 public lastIndexProcessed = 0;\r\n\r\n    uint256 public totalNodesCreated = 0;\r\n    uint256 public totalRewardStaked = 0;\r\n\r\n    constructor(\r\n        uint256 _nodePrice,\r\n        uint256 _rewardPerNode,\r\n        uint256 _claimTime\r\n    ) {\r\n        require(_claimTime != 0, \"Claim interval cannot be zero!\");\r\n        nodePrice = _nodePrice;\r\n        rewardPerNode = _rewardPerNode;\r\n        claimTime = _claimTime;\r\n        rewardPerSecond = _rewardPerNode / _claimTime;\r\n        gateKeeper = msg.sender;\r\n    }\r\n\r\n    modifier onlySentry() {\r\n        require(msg.sender == token || msg.sender == gateKeeper, \"Fuck off\");\r\n        _;\r\n    }\r\n\r\n    function setToken (address token_) external onlySentry {\r\n        token = token_;\r\n    }\r\n\r\n    function createNode(address account, string memory nodeName) external onlySentry {\r\n        require(\r\n            isNameAvailable(account, nodeName),\r\n            \"CREATE NODE: Name not available\"\r\n        );\r\n        _nodesOfUser[account].push(\r\n            NodeEntity({\r\n                name: nodeName,\r\n                creationTime: block.timestamp,\r\n                lastClaimTime: block.timestamp,\r\n                rewardAvailable: 0\r\n            })\r\n        );\r\n        nodeOwners.set(account, _nodesOfUser[account].length);\r\n        totalNodesCreated++;\r\n    }\r\n\r\n    function createNodes(address[] calldata accounts, string[] calldata nodeNames) external onlySentry {\r\n        require(accounts.length == nodeNames.length, \"INCONSISTENT_LENGTH\");\r\n        for(uint256 i = 0; i < accounts.length; i++) {\r\n             require(\r\n                isNameAvailable(accounts[i], nodeNames[i]),\r\n                \"CREATE NODE: Name not available\"\r\n            );\r\n            _nodesOfUser[accounts[i]].push(\r\n                NodeEntity({\r\n                    name: nodeNames[i],\r\n                    creationTime: block.timestamp,\r\n                    lastClaimTime: block.timestamp,\r\n                    rewardAvailable: 0\r\n                })\r\n            );\r\n            nodeOwners.set(accounts[i], _nodesOfUser[accounts[i]].length);\r\n            totalNodesCreated++;\r\n        }\r\n    }\r\n\r\n    function createNodesForAccount(address account, string[] calldata nodeNames) external onlySentry {\r\n        for(uint256 i = 0; i < nodeNames.length; i++) {\r\n            require(\r\n                isNameAvailable(account, nodeNames[i]),\r\n                \"CREATE NODE: Name not available\"\r\n            );\r\n            _nodesOfUser[account].push(\r\n                NodeEntity({\r\n                    name: nodeNames[i],\r\n                    creationTime: block.timestamp,\r\n                    lastClaimTime: block.timestamp,\r\n                    rewardAvailable: 0\r\n                })\r\n            );\r\n        }\r\n        nodeOwners.set(account, _nodesOfUser[account].length);\r\n        totalNodesCreated++;\r\n    }\r\n\r\n    function _renameNode(address account, string memory oldName, string memory newName) external onlySentry {\r\n      uint256 index = _getNodeByName(account, oldName);\r\n      require(index != uint(int(-1)), \"Node doesn't exist\");\r\n\r\n      NodeEntity storage node = _nodesOfUser[account][index];\r\n      node.name = newName;\r\n    }\r\n\r\n    function addRewardToNode(address account, string memory name, uint256 amount) external onlySentry {\r\n        require(isNodeOwner(account), \"GET REWARD OF: NO NODE OWNER\");\r\n        uint256 index = _getNodeByName(account, name);\r\n        require(index != uint(int(-1)), \"Node doesn't exist\");\r\n\r\n        NodeEntity storage node = _nodesOfUser[account][index];\r\n        node.rewardAvailable += amount;\r\n    }\r\n\r\n    function isNameAvailable(address account, string memory nodeName)\r\n    private\r\n    view\r\n    returns (bool)\r\n    {\r\n        NodeEntity[] memory nodes = _nodesOfUser[account];\r\n        for (uint256 i = 0; i < nodes.length; i++) {\r\n            if (keccak256(bytes(nodes[i].name)) == keccak256(bytes(nodeName))) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _burn(uint256 index) internal {\r\n        require(index < nodeOwners.size());\r\n        nodeOwners.remove(nodeOwners.getKeyAtIndex(index));\r\n    }\r\n\r\n    function _getNodeByName(address account, string memory name) private view returns (uint) {\r\n        NodeEntity[] storage nodes = _nodesOfUser[account];\r\n\r\n        for (uint256 i = 0; i < nodes.length; i++) {\r\n            if (keccak256(bytes(nodes[i].name)) == keccak256(bytes(name))) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return uint(int(-1));\r\n    }\r\n\r\n    function _getNodeWithCreationTime(NodeEntity[] storage nodes, uint256 _creationTime) private view returns (NodeEntity storage) {\r\n        for (uint256 i = 0; i < nodes.length; i++) {\r\n            if (nodes[i].creationTime == _creationTime) {\r\n                return nodes[i];\r\n            }\r\n        }\r\n\r\n        revert();\r\n    }\r\n\r\n    function isNodeClaimable(NodeEntity memory node) private view returns (bool) {\r\n        return node.lastClaimTime + claimTime <= block.timestamp;\r\n    }\r\n\r\n    function _availableClaimableAmount(uint256 nodeLastClaimTime) private view returns (uint256 availableRewards) {\r\n        return ((block.timestamp - nodeLastClaimTime) / claimTime) * rewardPerSecond;\r\n    }   \r\n    \r\n    function _cashoutNodeReward(address account, uint256 _creationTime)\r\n    external onlySentry\r\n    returns (uint256)\r\n    {\r\n        require(_creationTime > 0, \"NODE: CREATIME must be higher than zero\");\r\n        NodeEntity[] storage nodes = _nodesOfUser[account];\r\n        uint256 numberOfNodes = nodes.length;\r\n        require(\r\n            numberOfNodes > 0,\r\n            \"CASHOUT ERROR: You don't have nodes to cash-out\"\r\n        );\r\n        NodeEntity storage node = _getNodeWithCreationTime(nodes, _creationTime);\r\n        require(isNodeClaimable(node), \"TOO_EARLY_TO_CLAIM\");\r\n        uint256 rewardNode = _availableClaimableAmount(node.lastClaimTime) + node.rewardAvailable;\r\n\r\n        node.lastClaimTime = block.timestamp;\r\n\r\n        node.rewardAvailable = 0;\r\n        return rewardNode;\r\n    }\r\n\r\n    function _cashoutAllNodesReward(address account)\r\n    external onlySentry\r\n    returns (uint256)\r\n    {\r\n        NodeEntity[] storage nodes = _nodesOfUser[account];\r\n        uint256 nodesCount = nodes.length;\r\n        require(nodesCount > 0, \"NODE: Count must be higher than zero\");\r\n        NodeEntity storage _node;\r\n        uint256 rewardsTotal = 0;\r\n        for (uint256 i = 0; i < nodesCount; i++) {\r\n            _node = nodes[i];\r\n            rewardsTotal += _availableClaimableAmount(_node.lastClaimTime) + _node.rewardAvailable;\r\n            _node.rewardAvailable = 0;\r\n            _node.lastClaimTime = block.timestamp;\r\n        }\r\n        return rewardsTotal;\r\n    }\r\n\r\n    function claimable(NodeEntity memory node) private view returns (bool) {\r\n        return node.lastClaimTime + claimTime <= block.timestamp;\r\n    }\r\n\r\n    function _getRewardAmountOf(address account)\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        require(isNodeOwner(account), \"GET REWARD OF: NO NODE OWNER\");\r\n        uint256 nodesCount;\r\n        uint256 rewardCount = 0;\r\n\r\n        NodeEntity[] storage nodes = _nodesOfUser[account];\r\n        nodesCount = nodes.length;\r\n\r\n        for (uint256 i = 0; i < nodesCount; i++) {\r\n            NodeEntity memory node = nodes[i];\r\n            rewardCount +=_availableClaimableAmount(node.lastClaimTime) + node.rewardAvailable;\r\n        }\r\n\r\n        return rewardCount;\r\n    }\r\n\r\n    function _getRewardAmountOf(address account, uint256 _creationTime)\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        require(isNodeOwner(account), \"GET REWARD OF: NO NODE OWNER\");\r\n\r\n        require(_creationTime > 0, \"NODE: CREATIME must be higher than zero\");\r\n        NodeEntity[] storage nodes = _nodesOfUser[account];\r\n        uint256 numberOfNodes = nodes.length;\r\n        require(\r\n            numberOfNodes > 0,\r\n            \"CASHOUT ERROR: You don't have nodes to cash-out\"\r\n        );\r\n        NodeEntity storage node = _getNodeWithCreationTime(nodes, _creationTime);\r\n        return _availableClaimableAmount(node.lastClaimTime) + node.rewardAvailable;\r\n    }\r\n\r\n\r\n    function _getNodeRewardAmountOf(address account, uint256 creationTime)\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        NodeEntity[] storage nodes = _nodesOfUser[account];\r\n        return _getNodeWithCreationTime(nodes, creationTime).rewardAvailable;\r\n    }\r\n\r\n    function _getNodesNames(address account)\r\n    external\r\n    view\r\n    returns (string memory)\r\n    {\r\n        require(isNodeOwner(account), \"GET NAMES: NO NODE OWNER\");\r\n        NodeEntity[] memory nodes = _nodesOfUser[account];\r\n        uint256 nodesCount = nodes.length;\r\n        NodeEntity memory _node;\r\n        string memory names = nodes[0].name;\r\n        string memory separator = \"#\";\r\n        for (uint256 i = 1; i < nodesCount; i++) {\r\n            _node = nodes[i];\r\n            names = string(abi.encodePacked(names, separator, _node.name));\r\n        }\r\n        return names;\r\n    }\r\n\r\n    function _getNodesCreationTime(address account)\r\n    external\r\n    view\r\n    returns (string memory)\r\n    {\r\n        require(isNodeOwner(account), \"GET CREATIME: NO NODE OWNER\");\r\n        NodeEntity[] memory nodes = _nodesOfUser[account];\r\n        uint256 nodesCount = nodes.length;\r\n        NodeEntity memory _node;\r\n        string memory _creationTimes = uint2str(nodes[0].creationTime);\r\n        string memory separator = \"#\";\r\n\r\n        for (uint256 i = 1; i < nodesCount; i++) {\r\n            _node = nodes[i];\r\n\r\n            _creationTimes = string(\r\n                abi.encodePacked(\r\n                    _creationTimes,\r\n                    separator,\r\n                    uint2str(_node.creationTime)\r\n                )\r\n            );\r\n        }\r\n        return _creationTimes;\r\n    }\r\n\r\n    function _getNodesRewardAvailable(address account)\r\n    external\r\n    view\r\n    returns (string memory)\r\n    {\r\n        require(isNodeOwner(account), \"GET REWARD: NO NODE OWNER\");\r\n        NodeEntity[] memory nodes = _nodesOfUser[account];\r\n        uint256 nodesCount = nodes.length;\r\n        NodeEntity memory _node;\r\n\r\n        string memory _rewardsAvailable = uint2str(_availableClaimableAmount(nodes[0].lastClaimTime) + nodes[0].rewardAvailable);\r\n\r\n        string memory separator = \"#\";\r\n\r\n        for (uint256 i = 1; i < nodesCount; i++) {\r\n            _node = nodes[i];\r\n\r\n            _rewardsAvailable = string(\r\n                abi.encodePacked(\r\n                    _rewardsAvailable,\r\n                    separator,\r\n                    uint2str(_availableClaimableAmount(_node.lastClaimTime) + _node.rewardAvailable)\r\n                )\r\n            );\r\n        }\r\n        return _rewardsAvailable;\r\n    }\r\n\r\n    function _getNodesLastClaimTime(address account)\r\n    external\r\n    view\r\n    returns (string memory)\r\n    {\r\n        require(isNodeOwner(account), \"LAST CLAIME TIME: NO NODE OWNER\");\r\n        NodeEntity[] memory nodes = _nodesOfUser[account];\r\n        uint256 nodesCount = nodes.length;\r\n        NodeEntity memory _node;\r\n        string memory _lastClaimTimes = uint2str(nodes[0].lastClaimTime);\r\n        string memory separator = \"#\";\r\n\r\n        for (uint256 i = 1; i < nodesCount; i++) {\r\n            _node = nodes[i];\r\n\r\n            _lastClaimTimes = string(\r\n                abi.encodePacked(\r\n                    _lastClaimTimes,\r\n                    separator,\r\n                    uint2str(_node.lastClaimTime)\r\n                )\r\n            );\r\n        }\r\n        return _lastClaimTimes;\r\n    }\r\n\r\n    function uint2str(uint256 _i)\r\n    internal\r\n    pure\r\n    returns (string memory _uintAsString)\r\n    {\r\n        if (_i == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 j = _i;\r\n        uint256 len;\r\n        while (j != 0) {\r\n            len++;\r\n            j /= 10;\r\n        }\r\n        bytes memory bstr = new bytes(len);\r\n        uint256 k = len;\r\n        while (_i != 0) {\r\n            k = k - 1;\r\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\r\n            bytes1 b1 = bytes1(temp);\r\n            bstr[k] = b1;\r\n            _i /= 10;\r\n        }\r\n        return string(bstr);\r\n    }\r\n\r\n    function _changeNodePrice(uint256 newNodePrice) external onlySentry {\r\n        nodePrice = newNodePrice;\r\n    }\r\n\r\n    function _changeRewardPerNode(uint256 newPrice) external onlySentry {\r\n        rewardPerNode = newPrice;\r\n    }\r\n\r\n    function _changeClaimTime(uint256 newTime) external onlySentry {\r\n        claimTime = newTime;\r\n    }\r\n\r\n    function _changeAutoDistri(bool newMode) external onlySentry {\r\n        autoDistri = newMode;\r\n    }\r\n\r\n    function _changeGasDistri(uint256 newGasDistri) external onlySentry {\r\n        gasForDistribution = newGasDistri;\r\n    }\r\n\r\n    function _getNodeNumberOf(address account) public view returns (uint256) {\r\n        return nodeOwners.get(account);\r\n    }\r\n\r\n    function isNodeOwner(address account) private view returns (bool) {\r\n        return nodeOwners.get(account) > 0;\r\n    }\r\n\r\n    function _isNodeOwner(address account) external view returns (bool) {\r\n        return isNodeOwner(account);\r\n    }\r\n\r\n    function _transferNode(address from, address to, string memory nodeName) \r\n                                                    external onlySentry returns (bool) {\r\n\r\n        require(!isNameAvailable(from, nodeName), \"\");\r\n\r\n        require(isNameAvailable(to, nodeName), \"\");\r\n\r\n        uint index = _getNodeByName(from, nodeName);\r\n\r\n        require(index != uint(int(-1)), \"Node does not exist\");\r\n\r\n        NodeEntity[] storage nodes = _nodesOfUser[from];\r\n        uint last = nodes.length - 1;\r\n\r\n        _nodesOfUser[to].push(nodes[index]);\r\n\r\n        nodes[index] = nodes[last];\r\n        nodes.pop();\r\n\r\n        nodeOwners.set(from, _nodesOfUser[from].length);\r\n        nodeOwners.set(to, _nodesOfUser[to].length);\r\n\r\n        if (last == 1)\r\n            nodeOwners.remove(from);\r\n\r\n        return true;\r\n    }\r\n}"
    },
    "contracts/interfaces/IJoeRouter02.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\nimport \"./IJoeRouter01.sol\";\r\n\r\ninterface IJoeRouter02 is IJoeRouter01 {\r\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountAVAX);\r\n\r\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountAVAX);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IJoeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IJoeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function migrator() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\r\n    function allPairs(uint256) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint256);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    function setFeeToSetter(address) external;\r\n\r\n    function setMigrator(address) external;\r\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IJoeRouter01.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IJoeRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WAVAX() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    returns (\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function addLiquidityAVAX(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n    external\r\n    payable\r\n    returns (\r\n        uint256 amountToken,\r\n        uint256 amountAVAX,\r\n        uint256 liquidity\r\n    );\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityAVAX(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\r\n\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function removeLiquidityAVAXWithPermit(\r\n        address token,\r\n        uint256 liquidity,\r\n        uint256 amountTokenMin,\r\n        uint256 amountAVAXMin,\r\n        address to,\r\n        uint256 deadline,\r\n        bool approveMax,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactTokens(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactAVAXForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function swapTokensForExactAVAX(\r\n        uint256 amountOut,\r\n        uint256 amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapExactTokensForAVAX(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n\r\n    function swapAVAXForExactTokens(\r\n        uint256 amountOut,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function quote(\r\n        uint256 amountA,\r\n        uint256 reserveA,\r\n        uint256 reserveB\r\n    ) external pure returns (uint256 amountB);\r\n\r\n    function getAmountOut(\r\n        uint256 amountIn,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountOut);\r\n\r\n    function getAmountIn(\r\n        uint256 amountOut,\r\n        uint256 reserveIn,\r\n        uint256 reserveOut\r\n    ) external pure returns (uint256 amountIn);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}